# -*- coding: utf-8 -*-

# Mdown implementation generated from reading ui file 'mdown.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QHeaderView
from qfluentwidgets import MessageBox
import requests
import jsonpath
import os

class Ui_Mdown(object):
    def setupUi(self, Mdown):
        Mdown.setObjectName("Mdown")
        Mdown.resize(719, 639)
        self.layoutWidget = QtWidgets.QWidget(Mdown)
        self.layoutWidget.setGeometry(QtCore.QRect(30, 60, 671, 561))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_4.setContentsMargins(16, 16, 16, 16)
        self.verticalLayout_4.setSpacing(16)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.MdownTitle = LargeTitleLabel(self.layoutWidget)
        self.MdownTitle.setMaximumSize(QtCore.QSize(16777215, 45))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(30)
        font.setBold(True)
        font.setKerning(True)
        self.MdownTitle.setFont(font)
        self.MdownTitle.setObjectName("MdownTitle")
        self.verticalLayout_4.addWidget(self.MdownTitle)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.SimpleCardWidget = SimpleCardWidget(self.layoutWidget)
        self.SimpleCardWidget.setObjectName("SimpleCardWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.SimpleCardWidget)
        self.horizontalLayout_2.setContentsMargins(25, 16, 16, 16)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.ComboBox_2 = ComboBox(self.SimpleCardWidget)
        self.ComboBox_2.setObjectName("ComboBox_2")
        self.gridLayout.addWidget(self.ComboBox_2, 5, 0, 1, 1)
        self.BodyLabel = BodyLabel(self.SimpleCardWidget)
        self.BodyLabel.setObjectName("BodyLabel")
        self.gridLayout.addWidget(self.BodyLabel, 0, 0, 1, 1)
        self.BodyLabel_2 = BodyLabel(self.SimpleCardWidget)
        self.BodyLabel_2.setObjectName("BodyLabel_2")
        self.gridLayout.addWidget(self.BodyLabel_2, 2, 0, 1, 1)
        self.PrimaryPushButton = PrimaryPushButton(self.SimpleCardWidget)
        self.PrimaryPushButton.setObjectName("PrimaryPushButton")
        self.gridLayout.addWidget(self.PrimaryPushButton, 5, 1, 1, 1)
        self.TableView = TableView(self.SimpleCardWidget)
        self.TableView.setObjectName("TableView")
        self.gridLayout.addWidget(self.TableView, 4, 0, 1, 2)
        self.SearchLineEdit = SearchLineEdit(self.SimpleCardWidget)
        self.SearchLineEdit.setObjectName("SearchLineEdit")
        self.gridLayout.addWidget(self.SearchLineEdit, 3, 0, 1, 2)
        self.ComboBox = ComboBox(self.SimpleCardWidget)
        self.ComboBox.setObjectName("ComboBox")
        self.gridLayout.addWidget(self.ComboBox, 1, 0, 1, 2)
        self.horizontalLayout_2.addLayout(self.gridLayout)
        self.verticalLayout.addWidget(self.SimpleCardWidget)
        self.verticalLayout_4.addLayout(self.verticalLayout)
        self.model = QStandardItemModel(6, 2)

        self.model.setHorizontalHeaderLabels(['Song Name', 'Singer'])
        arr = ['Song Name', 'Singer']
        for row in range(6):
            for column in range(2):
                item = QStandardItem(str(arr[column]))
                self.model.setItem(row, column, item)
        self.TableView.setModel(self.model)
        self.ComboBox.addItem("netease")
        self.ComboBox.addItem("qq")
        self.ComboBox.addItem("kugou")
        self.ComboBox.addItem("kuwo")

        self.TableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.TableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.SearchLineEdit.searchButton.clicked.connect(lambda : self.get_music_name())
        self.PrimaryPushButton.clicked.connect(lambda : self.download_btn())
        self.retranslateUi(Mdown)
        QtCore.QMetaObject.connectSlotsByName(Mdown)

    def retranslateUi(self, Mdown):
        _translate = QtCore.QCoreApplication.translate
        Mdown.setWindowTitle(_translate("Mdown", "Mdown"))
        self.MdownTitle.setText(_translate("Mdown", "Music Download"))
        self.BodyLabel.setText(_translate("Mdown", "请先选择平台"))
        self.BodyLabel_2.setText(_translate("Mdown", "搜索音乐"))
        self.PrimaryPushButton.setText(_translate("Mdown", "download"))

    def get_music_name(self):
        name = self.SearchLineEdit.text()
        platfrom = self.ComboBox.currentText()
        print(name,platfrom)
        url = 'https://music.liuzhijin.cn/'
        headers = {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36",
            "x-requested-with": "XMLHttpRequest",
        }
        param = {
            "input": name,
            "filter": "name",
            "type": platfrom,
            "page": 1,
        }
        global title,author,url2
        json_text = requests.post(url=url, data=param, headers=headers).json()
        title = jsonpath.jsonpath(json_text, '$..title')
        author = jsonpath.jsonpath(json_text, '$..author')
        url2 = jsonpath.jsonpath(json_text, '$..url')
        if title:
            self.model = QStandardItemModel(6, 2)
            self.model.setHorizontalHeaderLabels(['Song Name', 'Singer'])
            numsum = 0
            global songs
            songs = list(zip(title, author, url))

            sn=[]
            sg=[]
            for s in songs:
                numsum+=1
                sn.append(s[0])
                sg.append(s[1])
                print(s[0],s[1])
                # self.model.setItem(numsum, sn, sg)

                if numsum == 6:
                    break
            for row in range(6):
                self.ComboBox_2.addItem(str(sn[row])+" - "+str(sg[row]))
                item = QStandardItem(str(sn[row]))
                self.model.setItem(row, 0, item)
                item = QStandardItem(str(sg[row]))
                self.model.setItem(row, 1, item)
                # self.model.setItem(i,sn[i],sg[i])
            # index = int(input("请输入您想下载的歌曲版本:"))
            # self.song_download(url[index - 1], title[index - 1], author[index - 1])

            self.TableView.setModel(self.model)

        else:
            print("对不起，暂无搜索结果!")
            w = MessageBox(
                'Sorry',
                '对不起，暂无搜索结果!',
                self
            )
            w.yesButton.setText('确定')
            w.cancelButton.setText('取消')
            if w.exec():
                pass

    def song_download(self,url, title, author):
        # 创建文件夹
        os.makedirs("music", exist_ok=True)
        path = 'music\{}.mp3'.format(title)
        print('歌曲:{0}-{1},正在下载...'.format(title, author))
        # 下载（这种读写文件的下载方式适合少量文件的下载）
        content = requests.get(url).content
        with open(file=title + author + '.mp3', mode='wb') as f:
            f.write(content)
        music_stat = os.stat(title + author + '.mp3')

        if music_stat.st_size == 101831:
            print("下载失败 请更换平台")
            os.remove(title + author + '.mp3')
        else:
            print('下载完毕,{0}-{1}'.format(title, author))
    def download_btn(self):
        if self.ComboBox_2.currentText()!="":

            numsum=0
            apple=[songs[0],songs[1],songs[2],songs[3],songs[4],songs[5]]
            for i in apple:
                numsum+=1
                if self.ComboBox_2.currentText().split(" - ")[0]==i[0] and self.ComboBox_2.currentText().split(" - ")[1]==i[1]:
                    self.song_download(url2[numsum-1], title[numsum-1], author[numsum-1])
                    print(i[0],'下载成功')
                    break
                else:
                    print(22)

        else:
            print("didn't choose song")
            w = MessageBox(
                'Sorry',
                '请选择要下载的歌曲',
                self
            )
            w.yesButton.setText('确定')
            w.cancelButton.setText('取消')
            if w.exec():
                pass

from qfluentwidgets import BodyLabel, ComboBox, LargeTitleLabel, PrimaryPushButton, SearchLineEdit, SimpleCardWidget, TableView
